apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-scripts
  namespace: backend
data:
  01-create-tables.sql: |
    -- Database initialization script for SRE Task
    -- Creates the required tables for the API service

    -- Enable UUID extension
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

    -- Users table (compatible with auth service requirements)
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL DEFAULT '',
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        role VARCHAR(50) DEFAULT 'user',
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        last_login_at TIMESTAMP WITH TIME ZONE
    );

    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
    CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);

    -- Insert default admin user for testing
    INSERT INTO users (email, first_name, last_name, role) 
    VALUES ('admin@example.com', 'Admin', 'User', 'admin')
    ON CONFLICT (email) DO NOTHING;

    -- Insert test users
    INSERT INTO users (email, first_name, last_name, role) 
    VALUES 
        ('testuser@example.com', 'Test', 'User', 'user'),
        ('john.doe@example.com', 'John', 'Doe', 'user'),
        ('jane.smith@example.com', 'Jane', 'Smith', 'user')
    ON CONFLICT (email) DO NOTHING;

    -- Function to auto-update updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- Trigger to automatically update updated_at
    DROP TRIGGER IF EXISTS update_users_updated_at ON users;
    CREATE TRIGGER update_users_updated_at
        BEFORE UPDATE ON users
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();

    -- Refresh tokens table (required by auth service)
    CREATE TABLE IF NOT EXISTS refresh_tokens (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        token VARCHAR(512) UNIQUE NOT NULL,
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        is_revoked BOOLEAN DEFAULT false
    );

    -- Password reset tokens table (required by auth service)
    CREATE TABLE IF NOT EXISTS password_reset_tokens (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        token VARCHAR(512) UNIQUE NOT NULL,
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        used_at TIMESTAMP WITH TIME ZONE
    );

    -- Create indexes for token tables
    CREATE INDEX IF NOT EXISTS idx_refresh_tokens_token ON refresh_tokens(token);
    CREATE INDEX IF NOT EXISTS idx_refresh_tokens_user_id ON refresh_tokens(user_id);
    CREATE INDEX IF NOT EXISTS idx_password_reset_tokens_token ON password_reset_tokens(token);

---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
  namespace: backend
  labels:
    app: db-init
    component: database
spec:
  template:
    metadata:
      labels:
        app: db-init
        component: database
    spec:
      restartPolicy: OnFailure
      containers:
      - name: db-init
        image: postgres:15-alpine
        command:
        - /bin/sh
        - -c
        - |
          echo "Starting database initialization..."
          export PGPASSWORD="$POSTGRES_PASSWORD"
          
          # Wait for database to be ready
          until pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER"; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          
          echo "Database is ready. Running initialization scripts..."
          
          # Run initialization scripts
          for script in /init-scripts/*.sql; do
            echo "Running script: $script"
            psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f "$script"
            if [ $? -eq 0 ]; then
              echo "Successfully executed $script"
            else
              echo "Failed to execute $script"
              exit 1
            fi
          done
          
          echo "Database initialization completed successfully!"
        env:
        - name: POSTGRES_HOST
          value: "sre-task-poc-db.c5y84uk6mycf.eu-central-1.rds.amazonaws.com"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        volumeMounts:
        - name: init-scripts
          mountPath: /init-scripts
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: init-scripts
        configMap:
          name: db-init-scripts
  backoffLimit: 3