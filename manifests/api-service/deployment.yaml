apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  namespace: backend
  labels:
    app: api-service
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-service
        image: 503561446285.dkr.ecr.eu-central-1.amazonaws.com/sre-task/api-service:v1
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: LOG_LEVEL
          value: "info"
        # Database connection with SSL support
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: DATABASE_URL
        - name: DB_HOST
          value: "sre-task-poc-db.c5y84uk6mycf.eu-central-1.rds.amazonaws.com"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        # SSL Configuration for PostgreSQL
        - name: PGSSLMODE
          value: "require"
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: "0"
        # Application secrets
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: JWT_SECRET
        - name: REDIS_URL
          value: "redis://redis.backend.svc.cluster.local:6379"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service.backend.svc.cluster.local:8080"
        - name: IMAGE_SERVICE_URL
          value: "http://image-service.backend.svc.cluster.local:5000"
        - name: S3_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: s3-secret
              key: S3_BUCKET_NAME
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: s3-secret
              key: AWS_REGION
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE